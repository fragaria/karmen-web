#!/usr/bin/env node

const cloudinary = require('cloudinary');

const cloudName = 'fragaria';
const rootFolder = 'fragaria.cz';

function upload(filePath, opts = {folder: null, apiKey: null, apiSecret: null, resourceType: null, keepFilename: false}) {
    return new Promise((resolve, reject) => {
        const folder = opts.folder ? [rootFolder, opts.folder].join('/') : rootFolder;
        const finalOpts = {
            folder,
            api_key: opts.apiKey,
            api_secret: opts.apiSecret,
            cloud_name: cloudName,
            resource_type: opts.resourceType,
            use_filename: true,
            unique_filename: ! opts.keepFilename,
        };
        cloudinary.v2.uploader.upload(filePath, finalOpts, (err, result) => {
            if (err) {
                return reject(err);
            }
            return resolve(result);
        })
    });
}

require('yargs') // eslint-disable-line
    .command('upload <file> <folder>', 'upload file to Cloudinary', yargs => {
        yargs
            .positional('file', {
                describe: 'path to your file',
                type: 'string',
            })
            .positional('folder', {
                describe: `folder within ${rootFolder} scope`,
                type: 'string',
                default: null,
            })
    }, (argv) => {
        if (argv.verbose) {
            console.info(`Uploading file ${argv.file}`);
        }

        upload(argv.file, {folder: argv.folder, apiKey: argv.apiKey, apiSecret: argv.apiSecret, resourceType: argv.resourceType, keepFilename: argv.keepFilename})
            .then(result => {
                console.log('Upload successful.');
                console.log('Public ID: ', result.public_id.replace(`${rootFolder}/`, ''));
            })
            .catch(err => {
                console.error('Upload failed with error: ', err);
            })
    })
    .option('verbose', {
        alias: 'v',
        default: false
    })
    .option('apiKey', {
        alias: 'k',
        type: 'string',
        required: true
    })
    .option('apiSecret', {
        alias: 's',
        type: 'string',
        required: true
    })
    .option('resourceType', {
        alias: 't',
        type: 'string',
        default: 'raw'
    })
    .option('keepFilename', {
        alias: 'kf',
        type: 'boolean',
        default: false
    })
    .argv;
